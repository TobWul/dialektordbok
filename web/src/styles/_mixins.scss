@use "sass:math";

@function strip-units($number) {
  @return math.div($number, ($number * 0 + 1));
}

@function rem-to-px($rem) {
  @return strip-units($rem) * 16;
}

@function least-squares-fit($map) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "leastSquaresFit() $map must be at least 2 values";
  }

  // Calculate the Means
  $resTotal: 0;
  $valueTotal: 0;

  @each $res, $value in $map {
    $resTotal: $resTotal + $res;
    $valueTotal: $valueTotal + rem-to-px($value);
  }

  $resMean: math.div($resTotal, $length);
  $valueMean: math.div($valueTotal, $length);

  // Calculate some other stuff
  $multipliedDiff: 0;
  $squaredDiff: 0;

  @each $res, $value in $map {
    // Differences from means
    $resDiff: $res - $resMean;
    $valueDiff: rem-to-px($value) - $valueMean;

    // Sum of multiplied differences
    $multipliedDiff: $multipliedDiff + ($resDiff * $valueDiff);

    // Sum of squared resolution differences
    $squaredDiff: $squaredDiff + ($resDiff * $resDiff);
  }

  // Calculate the Slope
  $m: math.div($multipliedDiff, $squaredDiff);

  // Calculate the Y-Intercept
  $b: $valueMean - ($m * $resMean);

  // Return the CSS calc equation
  @return calc(#{$m * 100}vw + #{$b}px);
}

@mixin variable-font-size($map) {
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length==4) {
    @error "variable-font-size $map must be 2 values";
  }

  font-size: least-squares-fit($map);

  @media screen and (min-width: nth(map-keys($map: $map), 2) * 1px) {
    font-size: nth(map-values($map: $map), 2);
  }

  @media screen and (max-width: nth(map-keys($map: $map), 1) * 1px) {
    font-size: nth(map-values($map: $map), 1);
  }
}

@mixin break-word {
  word-break: break-all;
  hyphens: auto;
  /* Non standard for WebKit */
  word-break: break-word;
}
