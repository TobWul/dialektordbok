//  global context flags using wierd ☠️ names to minimize
//  chance of naming conflicts with other scss variables
$☠️--animation-timeline-duration: null;
$☠️--animation-timeline-tweens: null;

//  mixin to create an animation context for nested tweens
//  used to calculate the total duration of the animation
//  converting each tween delay into percentages
@mixin animation-timeline($name: unique-id()) {
  //  global context flag to sum up duration
  $☠️--animation-timeline-duration: 0s !global;

  //  global context map to hold animation tweens
  $☠️--animation-timeline-tweens: () !global;

  //  mixin content (the included tweens)
  @content;

  //  animation name and duration
  //  note! if no name is provided a unique id will be used
  //  this allows you to create one-time-use animations without
  //  having to deal with animation naming conflicts :-)
  animation-name: $name;
  animation-duration: $☠️--animation-timeline-duration;

  //  create keyframes
  @keyframes #{$name} {
    //  loop through the included tweens
    @each $time, $props in $☠️--animation-timeline-tweens {
      //  calculate percentage based on total duration
      #{percentage($time/$☠️--animation-timeline-duration)} {
        //  print out the tween properties
        @each $prop, $value in $props {
          #{$prop}: $value;
        }
      }
    }
  }

  //  reset global context flags
  $☠️--animation-timeline-duration: null !global;
  $☠️--animation-timeline-tweens: null !global;
}

//  mixin to create tweens based on a delay and a map
//  containing the the tween properties*
//
//  * using a map is not optimal – but for now you are not
//  able to save @content to variables :(
//
@mixin tween($delay: 0s, $props: null) {
  //  only do stuff if we are in a animation-timeline context
  @if $☠️--animation-timeline-tweens {
    //  increment the total animation by the the tween delay
    $☠️--animation-timeline-duration: $☠️--animation-timeline-duration +
      $delay !global;
    //  save current duration and tween props to the global tween map
    $☠️--animation-timeline-tweens: map-merge(
      $☠️--animation-timeline-tweens,
      (
        $☠️--animation-timeline-duration: $props,
      )
    ) !global;
  }
}

@mixin grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1rem;
}

@mixin grid-thumbnail {
  font-weight: normal;
  width: 100%;
  max-width: 700px;
  height: 300px;

  h4 {
    margin-top: 1rem;
  }

  img {
    width: 100%;
    object-fit: cover;
  }
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function rem-to-px($rem) {
  @return strip-units($rem) * 16;
}

@function least-squares-fit($map) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "leastSquaresFit() $map must be at least 2 values";
  }

  // Calculate the Means
  $resTotal: 0;
  $valueTotal: 0;

  @each $res, $value in $map {
    $resTotal: $resTotal + $res;
    $valueTotal: $valueTotal + rem-to-px($value);
  }

  $resMean: $resTotal/$length;
  $valueMean: $valueTotal/$length;

  // Calculate some other stuff
  $multipliedDiff: 0;
  $squaredDiff: 0;

  @each $res, $value in $map {
    // Differences from means
    $resDiff: $res - $resMean;
    $valueDiff: rem-to-px($value) - $valueMean;

    // Sum of multiplied differences
    $multipliedDiff: $multipliedDiff + ($resDiff * $valueDiff);

    // Sum of squared resolution differences
    $squaredDiff: $squaredDiff + ($resDiff * $resDiff);
  }

  // Calculate the Slope
  $m: $multipliedDiff / $squaredDiff;

  // Calculate the Y-Intercept
  $b: $valueMean - ($m * $resMean);

  // Return the CSS calc equation
  @return calc(#{$m * 100}vw + #{$b}px);
}

@mixin variable-font-size($map) {
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length==4) {
    @error "variable-font-size $map must be 2 values";
  }

  font-size: least-squares-fit($map);

  @media screen and (min-width: nth(map-keys($map: $map), 2) * 1px) {
    font-size: nth(map-values($map: $map), 2);
  }

  @media screen and (max-width: nth(map-keys($map: $map), 1) * 1px) {
    font-size: nth(map-values($map: $map), 1);
  }
}

@mixin break-word {
  word-break: break-all;
  hyphens: auto;
  /* Non standard for WebKit */
  word-break: break-word;
}
